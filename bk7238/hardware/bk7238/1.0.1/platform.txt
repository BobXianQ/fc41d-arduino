name=BK7238
version=0.0.1


tools.bk_loader.path={runtime.tools.bk_loader.path}
tools.bk_loader.cmd.windows=bk_loader.bat
tools.bk_loader.cmd.linux=bk_loader.sh
compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.sdk.path={runtime.platform.path}/tools/sdk

build.extra_flags = 
build.extra_libs =

compiler.c.extra_flags =
compiler.cpp.extra_flags=
compiler.S.extra_flags=
compiler.ar.extra_flags =
compiler.c.elf.extra_flags=
compiler.libraries.ldflags=



## cmd	
compiler.c.cmd=arm-none-eabi-gcc.exe
compiler.cpp.cmd=arm-none-eabi-g++.exe
compiler.S.cmd=arm-none-eabi-gcc.exe
compiler.ar.cmd = arm-none-eabi-ar.exe
compiler.c.elf.cmd = arm-none-eabi-gcc.exe
compiler.c.bin.cmd = arm-none-eabi-objcopy.exe

compiler.cpreprocessor.flags = -D_GNU_SOURCE -DCFG_OS_FREERTOS=1 -DBUILDING_LIBCURL -DQL_CSDK_SUPPORT -DQL_CSDK_MODE=1 -DUSE_MBEDTLS_2_27_0 -DQL_PROJECT_FGM842D -DMBEDTLS_CONFIG_FILE="tls_config.h" -iprefix "{compiler.sdk.path}/CSDK/" @{compiler.sdk.path}/CSDK/include3.txt


compiler.c.elf.libs = -lrf_test -lsupplicant -los -ldriver -lsensor -lairkiss -lql_adapt -lwolfssl -lfunc -lusb -lmisc -lble_pub -lsrc_s -lrwnx -lble -lrf_use -lcal -lwpa -luart_debug -lbk_aware -lcurl -llfs -lmbedtls -lmqtt -lw5500 -lhttp_parser -llwip -lql_example -lstdc++
compiler.c.flags = -c -g -mthumb -mcpu=arm968e-s -march=armv5te -mthumb-interwork -mlittle-endian -O0 -std=c99 -ffunction-sections -Wall -Werror -Wno-format -Wno-unknown-pragmas -fsigned-char -fdata-sections -nostdlib -fno-strict-aliasing
compiler.cpp.flags = -c -mthumb -Og -g2 -fno-common -ffunction-sections -fdata-sections --specs=nosys.specs --specs=nano.specs -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -Wall -Werror -Wstack-usage=8192 -Wextra -Wunreachable-code -Wvla -Wformat -Wformat-nonliteral -Wformat-security -Wno-deprecated-declarations  -Wno-maybe-uninitialized -Wno-missing-field-initializers -Wno-unused-parameter -Wno-psabi  -fno-strict-aliasing -std=gnu++14 -fno-rtti -Wnon-virtual-dtor -mthumb -mcpu=arm968e-s -mthumb-interwork -mlittle-endian -march=armv5te -Wno-conversion -Os -Wno-sign-compare -Wno-unused-function -Wno-unused-but-set-variable -Wno-unused-variable -Wno-unused-parameter -Wno-literal-suffix -Wno-write-strings -Wno-error=format


compiler.S.flags= -g -marm -mthumb-interwork -mcpu=arm968e-s -march=armv5te -x assembler-with-cpp
compiler.ar.flags = -rcs
compiler.c.elf.flags = -u user_main -g -Wl,--gc-sections -marm -mcpu=arm968e-s -mthumb-interwork -nostdlib  -Xlinker -Map=beken.map -Wl,-wrap,malloc -Wl,-wrap,_malloc_r -Wl,-wrap,free -Wl,-wrap,_free_r -Wl,-wrap,zalloc -Wl,-wrap,calloc -Wl,-wrap,realloc  -Wl,-wrap,_realloc_r -Wl,-wrap,printf -Wl,-wrap,vsnprintf -Wl,-wrap,snprintf -Wl,-wrap,sprintf -Wl,-wrap,puts -Wl,-wrap,strnlen -Wl,-wrap,__assert_func -Wl,-wrap,strtod -Wl,-wrap,qsort -Wl,-wrap,sscanf -Wl,-wrap,__errno -Wl,-wrap,rand -Wl,-wrap,srand -Wl,-wrap,strtol -Wl,-wrap,strtoul -Wl,-wrap,strtoll -Wl,-wrap,strtoull -Wl,-wrap,pow -Wl,-wrap,exp -Wl,-wrap,log


## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.cpreprocessor.flags} {compiler.c.flags} {compiler.c.extra_flags} {includes} "{source_file}" -o "{object_file}"


## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpreprocessor.flags} {compiler.cpp.flags} {compiler.cpp.extra_flags} {includes} "{source_file}" -o "{object_file}"


## Compile assembly files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.cpreprocessor.flags} {compiler.S.flags} {compiler.S.extra_flags} "{source_file}" -o "{object_file}"


## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"


## Create elf
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" -o "{build.path}/{build.project_name}.elf" "-L{compiler.sdk.path}/CSDK/ql_kernel/prebuilds" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} {build.extra_flags} -Wl,--start-group {object_files} "{archive_file_path}" {build.extra_libs} {compiler.c.elf.libs} {compiler.libraries.ldflags} -lg_nano -Wl,--end-group "-T{compiler.sdk.path}/CSDK/ql_build/fgm842d.ld" -Xlinker "-Map={build.path}/{build.project_name}.map"


## Create bin

recipe.objcopy.bin.pattern="{compiler.path}{compiler.c.bin.cmd}" -O binary "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

tools.beken_packager.path = {runtime.tools.beken_packager.path}

tools.beken_packager.cmd.windows = beken_packager.bat
tools.beken_packager.cmd.linux = beken_packager.sh
tools.beken_packager.conifg.cmd.windows = config.bat
tools.beken_packager.conifg.cmd.linux = config.sh

recipe.objcopy.bin.pattern_args = {tools.beken_packager.path} {build.path}\{build.project_name}_all.bin

tools.beken_packager.conifg.args.windows = {compiler.sdk.path}/CSDK/ql_build/bootloader/bootloader1.bin {build.path}\{build.project_name}.bin {tools.beken_packager.path}

tools.beken_packager.conifg.args.linux = {compiler.sdk.path}/CSDK/ql_build/bootloader/bootloader1.bin {build.path}/{build.project_name}.bin {tools.beken_packager.path}

recipe.objcopy.partitions.bin.1.pattern = "{tools.beken_packager.path}/{tools.beken_packager.conifg.cmd}" {tools.beken_packager.conifg.args}

recipe.objcopy.partitions.bin.2.pattern="{tools.beken_packager.path}/{tools.beken_packager.cmd}" {recipe.objcopy.bin.pattern_args}

tools.bk_loader.upload.protocol=serial
tools.bk_loader.upload.params.verbose=
tools.bk_loader.upload.params.quiet=
tools.bk_loader.upload.pattern_args = {path} {serial.port} {upload.speed} {build.path}\{build.project_name}_all.bin
tools.bk_loader.upload.pattern="{path}/{cmd}" {upload.pattern_args}
